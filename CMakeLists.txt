cmake_minimum_required(VERSION 3.14)

# Partially generated by `cmake-init`

# ---- In-source guard ----
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR "In-source builds are not supported.")
endif()

project(
    perturb
    VERSION 0.0.1
    DESCRIPTION "A modern C++ wrapper for SGP4 orbit propagation"
    HOMEPAGE_URL "https://github.com/gunvirranu/perturb"
    LANGUAGES CXX
)

# For CMake 3.21+, variable is set by default by project()
if(CMAKE_VERSION VERSION_LESS 3.21.0)
    string(
        COMPARE EQUAL
        "${CMAKE_SOURCE_DIR}" "${PROJECT_SOURCE_DIR}"
        PROJECT_IS_TOP_LEVEL
    )
endif()

# ---- Developer mode ----

if(PROJECT_IS_TOP_LEVEL)
    option(perturb_DEVELOPER_MODE "Enable developer mode" OFF)
endif()

# ---- Warning guard ----

# target_include_directories with the SYSTEM modifier will request the compiler
# to omit warnings from the provided paths, if the compiler supports that
# This is to provide a user experience similar to find_package when
# add_subdirectory or FetchContent is used to consume this project
set(warning_guard "")
if(NOT PROJECT_IS_TOP_LEVEL)
    option(
        perturb_INCLUDES_WITH_SYSTEM
        "Use SYSTEM modifier for perturb's includes, disabling warnings"
        ON
    )
    mark_as_advanced(perturb_INCLUDES_WITH_SYSTEM)
    if(perturb_INCLUDES_WITH_SYSTEM)
        set(warning_guard SYSTEM)
    endif()
endif()

# ---- Declare library ----

add_library(perturb src/perturb.cpp)

target_include_directories(
    perturb ${warning_guard}
    PUBLIC
        $<INSTALL_INTERFACE:include>
        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/src
)

target_compile_features(perturb PUBLIC cxx_std_11)

# ---- Install rules ----

if(NOT CMAKE_SKIP_INSTALL_RULES)
    include(cmake/install-rules.cmake)
endif()

# ---- Developer mode ----

if(NOT perturb_DEVELOPER_MODE)
    return()
elseif(NOT PROJECT_IS_TOP_LEVEL)
    message(AUTHOR_WARNING "Developer mode enabled")
endif()
